// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopAppStore.Infrastructure.Repositories;

#nullable disable

namespace ShopAppStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251101172438_UpdateColCombo")]
    partial class UpdateColCombo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AccountOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActivatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__AccountO__3214EC07F4BA3347");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrderItemId");

                    b.ToTable("AccountOrderItem", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.App", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AppId")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__App__8E2CF7F9A60BDA13");

                    b.HasIndex("BlogId");

                    b.HasIndex("DurationId");

                    b.HasIndex(new[] { "Slug" }, "UQ__App__BC7B5FB69F4D0B55")
                        .IsUnique();

                    b.ToTable("App", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__AppAccou__3214EC07893BE462");

                    b.HasIndex("AppId");

                    b.ToTable("AppAccount", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__AppCateg__3214EC07B311F2C7");

                    b.HasIndex("AppId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AppCategory", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__AppImage__3214EC07B8EC990C");

                    b.HasIndex("AppId");

                    b.ToTable("AppImage", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppPlatForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatFormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__AppPlatF__3214EC07A6C30CE5");

                    b.HasIndex("AppId");

                    b.HasIndex("PlatFormId");

                    b.ToTable("AppPlatForm", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AttributeApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Attribut__3214EC075B5F5BCA");

                    b.HasIndex("AppId");

                    b.ToTable("AttributeApp", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Blog__3214EC077C77F718");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex(new[] { "Slug" }, "UQ__Blog__BC7B5FB6AD008641")
                        .IsUnique();

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.BlogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__BlogCate__3214EC07CA767422");

                    b.HasIndex("ParentId");

                    b.ToTable("BlogCategory", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Cart__3214EC073D0F3377");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CartItem__3214EC07A6FDC39B");

                    b.HasIndex("AppId");

                    b.HasIndex("CartId");

                    b.HasIndex("ComboId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC07BF69C415");

                    b.HasIndex(new[] { "Slug" }, "UQ__Category__BC7B5FB6F346B578")
                        .IsUnique();

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ComboPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("ComboTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublicIdImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Combo__3214EC07D425F445");

                    b.HasIndex("ComboTypeId");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.ComboApp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__ComboApp__3214EC07F2F103B9");

                    b.HasIndex("AppId");

                    b.HasIndex("ComboId");

                    b.ToTable("ComboApp", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.ComboType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuantityRequired")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ComboTyp__3214EC0717BC2745");

                    b.ToTable("ComboType", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUses")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsesPerUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC07EA9BB7BE");

                    b.HasIndex(new[] { "DiscountCode" }, "UQ__Discount__A1120AF5E3188A1E")
                        .IsUnique();

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.DiscountUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Discount__3214EC0750A4F029");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscountUsage", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Duration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DurationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Duration__3214EC0748D654D8");

                    b.ToTable("Duration", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("TotalApplyDiscount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Order__3214EC076465FAC8");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RawTotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id")
                        .HasName("PK__OrderIte__3214EC07E9EB7F87");

                    b.HasIndex("AppId");

                    b.HasIndex("ComboId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Payment__3214EC07CDEF1300");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.PlatForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PlatFormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__PlatForm__3214EC07B13B0BC5");

                    b.ToTable("PlatForm", (string)null);
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AdminReply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdminReplyAt")
                        .HasColumnType("datetime");

                    b.Property<string>("AdminReplyById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AppId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Review__3214EC07F78B5954");

                    b.HasIndex("AdminReplyById");

                    b.HasIndex("AppId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AccountOrderItem", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppAccount", "Account")
                        .WithMany("AccountOrderItems")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("AccountOrderItem_fk7");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.OrderItem", "OrderItem")
                        .WithMany("AccountOrderItems")
                        .HasForeignKey("OrderItemId")
                        .IsRequired()
                        .HasConstraintName("AccountOrderItem_fk3");

                    b.Navigation("Account");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.App", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.Blog", "Blog")
                        .WithMany("Apps")
                        .HasForeignKey("BlogId")
                        .HasConstraintName("App_fk12");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Duration", "Duration")
                        .WithMany("Apps")
                        .HasForeignKey("DurationId")
                        .IsRequired()
                        .HasConstraintName("App_fk7");

                    b.Navigation("Blog");

                    b.Navigation("Duration");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppAccount", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("AppAccounts")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("AppAccount_fk5");

                    b.Navigation("App");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppCategory", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("AppCategories")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("AppCategory_fk1");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Category", "Category")
                        .WithMany("AppCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("AppCategory_fk2");

                    b.Navigation("App");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppImage", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("AppImages")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("AppImage_fk1");

                    b.Navigation("App");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppPlatForm", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("AppPlatForms")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("AppPlatForm_fk1");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.PlatForm", "PlatForm")
                        .WithMany("AppPlatForms")
                        .HasForeignKey("PlatFormId")
                        .IsRequired()
                        .HasConstraintName("AppPlatForm_fk2");

                    b.Navigation("App");

                    b.Navigation("PlatForm");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AttributeApp", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("AttributeApps")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("AttributeApp_fk3");

                    b.Navigation("App");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Blog", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.BlogCategory", "BlogCategoryNavigation")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .IsRequired()
                        .HasConstraintName("Blog_fk3");

                    b.Navigation("BlogCategoryNavigation");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.BlogCategory", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.BlogCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("BlogCategory_fk2");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Cart", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Cart_fk1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.CartItem", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("CartItems")
                        .HasForeignKey("AppId")
                        .HasConstraintName("CartItem_fk3");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("CartItem_fk1");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Combo", "Combo")
                        .WithMany("CartItems")
                        .HasForeignKey("ComboId")
                        .HasConstraintName("CartItem_fk4");

                    b.Navigation("App");

                    b.Navigation("Cart");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Combo", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.ComboType", "ComboType")
                        .WithMany("Combos")
                        .HasForeignKey("ComboTypeId")
                        .IsRequired()
                        .HasConstraintName("Combo_fk2");

                    b.Navigation("ComboType");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.ComboApp", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("ComboApps")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("ComboApp_fk2");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Combo", "Combo")
                        .WithMany("ComboApps")
                        .HasForeignKey("ComboId")
                        .IsRequired()
                        .HasConstraintName("ComboApp_fk1");

                    b.Navigation("App");

                    b.Navigation("Combo");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.DiscountUsage", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.Discount", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("DiscountUsage_fk2");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Order", "Order")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("DiscountUsage_fk3");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", "User")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("DiscountUsage_fk1");

                    b.Navigation("Discount");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Order", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("Order_fk6");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Order_fk1");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.OrderItem", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("OrderItems")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("OrderItem_fk3");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Combo", "Combo")
                        .WithMany("OrderItems")
                        .HasForeignKey("ComboId")
                        .HasConstraintName("OrderItem_fk5");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("OrderItem_fk1");

                    b.Navigation("App");

                    b.Navigation("Combo");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Review", b =>
                {
                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", "AdminReplyByNavigation")
                        .WithMany("ReviewAdminReplyByNavigations")
                        .HasForeignKey("AdminReplyById")
                        .HasConstraintName("Review_fk9");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.App", "App")
                        .WithMany("Reviews")
                        .HasForeignKey("AppId")
                        .IsRequired()
                        .HasConstraintName("Review_fk1");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Review_fk3");

                    b.HasOne("ShopAppStore.Infrastructure.Entities.AppUser", "User")
                        .WithMany("ReviewUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Review_fk2");

                    b.Navigation("AdminReplyByNavigation");

                    b.Navigation("App");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.App", b =>
                {
                    b.Navigation("AppAccounts");

                    b.Navigation("AppCategories");

                    b.Navigation("AppImages");

                    b.Navigation("AppPlatForms");

                    b.Navigation("AttributeApps");

                    b.Navigation("CartItems");

                    b.Navigation("ComboApps");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppAccount", b =>
                {
                    b.Navigation("AccountOrderItems");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("DiscountUsages");

                    b.Navigation("Orders");

                    b.Navigation("ReviewAdminReplyByNavigations");

                    b.Navigation("ReviewUsers");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Blog", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.BlogCategory", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Category", b =>
                {
                    b.Navigation("AppCategories");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Combo", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ComboApps");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.ComboType", b =>
                {
                    b.Navigation("Combos");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Discount", b =>
                {
                    b.Navigation("DiscountUsages");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Duration", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Order", b =>
                {
                    b.Navigation("DiscountUsages");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.OrderItem", b =>
                {
                    b.Navigation("AccountOrderItems");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShopAppStore.Infrastructure.Entities.PlatForm", b =>
                {
                    b.Navigation("AppPlatForms");
                });
#pragma warning restore 612, 618
        }
    }
}
